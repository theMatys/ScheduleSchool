// Generated by Apple Swift version 4.1 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import QuartzCore;
@import UIKit;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ScheduleSchool",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





@class UIWindow;
@class UIApplication;

SWIFT_CLASS("_TtC14ScheduleSchool21SSApplicationDelegate")
@interface SSApplicationDelegate : UIResponder <UIApplicationDelegate>
/// The window of the application.
@property (nonatomic, strong) UIWindow * _Nullable window;
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
- (void)applicationWillResignActive:(UIApplication * _Nonnull)application;
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
- (void)applicationWillEnterForeground:(UIApplication * _Nonnull)application;
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

SWIFT_CLASS("_TtC14ScheduleSchool15SSBarButtonItem")
@interface SSBarButtonItem : UIBarButtonItem
@property (nonatomic, copy) NSString * _Null_unspecified localizationKey;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

/// The base class of the application’s custom button with specific inspectable layer properties and full customizability.
SWIFT_CLASS("_TtC14ScheduleSchool14UICustomButton")
@interface UICustomButton : UIButton
/// The radius to use when drawing rounded corners for the button’s background.
/// If its value is not set, the button will use its default corner radius.
/// If its value is less than zero, the button will use a corner radius of half of its height. This will cause the button to be drawn with fully rounded corners without over-rounding them.
@property (nonatomic) CGFloat cornerRadius;
/// The color of the button’s border.
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/// The width of the view layer’s border.
@property (nonatomic) CGFloat borderWidth;
/// The color of the view layer’s shadow.
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
/// The opacity of the view layer’s shadow.
@property (nonatomic) float shadowOpacity;
/// The blur radius (in points) used to render the view layer’s shadow.
@property (nonatomic) CGFloat shadowRadius;
/// The offset (in points) of the view layer’s shadow.
@property (nonatomic) CGSize shadowOffset;
/// A boolean value that indicates whether the receiver handles touch events exclusively.
@property (nonatomic) BOOL exclusive;
/// The raw code of the button’s gradient.
/// If there is a valid code provided, the view will compile the code into an <code>SSGradient</code> and fill its layer with it.
/// If there is no code provided or the code is invalid, the view will be filled with the background color.
@property (nonatomic, copy) NSString * _Nonnull gradientCode;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) CGRect frame;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;

/// The custom button of the application.
SWIFT_CLASS("_TtC14ScheduleSchool8SSButton")
@interface SSButton : UICustomButton
@property (nonatomic, copy) NSString * _Null_unspecified localizationKey;
/// The Interface Builder compatible copy of “<code>highlightStyle</code>”.
/// Whenever its value is set, it is clamped and used to create an <code>SSButton.HighlightStyle</code> instance.
@property (nonatomic) NSInteger ibHighlightStyle;
/// A boolean which indicates whether the button can be selected.
@property (nonatomic) BOOL selectable;
/// An image which is visible when the button is selected, but hidden when the button is deselected.
/// The image is vertically centered in the button. As for the horizontal placement, the image will be insetted with <code>indicatorInsets</code> either from the left or the right (depending on the sign of <code>indicatorInset</code>).
/// The image is drawn with the size <code>indicatorSize</code>.
@property (nonatomic, strong) UIImage * _Nullable indicatorImage;
/// The horizontal inset of the indicator image.
/// <em>Positive values</em> will be counted from the left side of the button’s bounds.
/// <em>Negative values</em> will be counted from the right side of the button’s bounds.
@property (nonatomic) CGFloat indicatorInset;
/// The size of the selection indicator image.
@property (nonatomic) CGSize indicatorSize;
@property (nonatomic, strong) UIColor * _Nonnull indicatorColor;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, readonly) UIButtonType buttonType;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A button which behaves like a basic table view cell (aka a table view cell with a single label and an optional accessory).
SWIFT_CLASS("_TtC14ScheduleSchool12SSCellButton")
@interface SSCellButton : SSButton
/// A boolean which indicates whether the selection indicator should always be displayed in the button (like an accessory).
@property (nonatomic) BOOL indicatorAlwaysVisible;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UITimingCurveProvider;

/// A custom view property animator which executes a set of animations on a given array of views, giving each one of them a specific delay.
SWIFT_CLASS("_TtC14ScheduleSchool29SSDelayedViewPropertyAnimator")
@interface SSDelayedViewPropertyAnimator : UIViewPropertyAnimator
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration timingParameters:(id <UITimingCurveProvider> _Nonnull)parameters OBJC_DESIGNATED_INITIALIZER;
@end


/// A custom view of the application with specific inspectable layer properties.
SWIFT_CLASS("_TtC14ScheduleSchool6SSView")
@interface SSView : UIView
/// The radius to use when drawing rounded corners for the view layer’s background.
/// If its value is not set, the view will use its default corner radius.
/// If its value is less than zero, the view will use a corner radius of half of its height. This will cause the view to be drawn with fully rounded corners without over-rounding them.
@property (nonatomic) CGFloat cornerRadius;
/// The color of the view layer’s border.
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/// The width of the view layer’s border.
@property (nonatomic) CGFloat borderWidth;
/// The color of the view layer’s shadow.
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
/// The opacity of the view layer’s shadow.
@property (nonatomic) float shadowOpacity;
/// The blur radius (in points) used to render the view layer’s shadow.
@property (nonatomic) CGFloat shadowRadius;
/// The offset (in points) of the view layer’s shadow.
@property (nonatomic) CGSize shadowOffset;
@property (nonatomic) CGRect frame;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A custom view of the application with a gradient-fill capability.
SWIFT_CLASS("_TtC14ScheduleSchool14SSGradientView")
@interface SSGradientView : SSView
/// The raw code of the view layer’s gradient.
/// If there is a valid code provided, the view will compile the code into an <code>SSGradient</code> and fill its layer with it.
/// If there is no code provided or the code is invalid, the view will be filled with the background color.
@property (nonatomic, copy) NSString * _Nonnull gradientCode;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// The base class of the application’s custom image view with specific inspectable layer properties.
SWIFT_CLASS("_TtC14ScheduleSchool17UICustomImageView")
@interface UICustomImageView : UIImageView
/// The radius to use when drawing rounded corners for the image view’s background.
/// If its value is not set, the image view will use its default corner radius.
/// If its value is less than zero, the image view will use a corner radius of half of its height. This will cause the image view to be drawn with fully rounded corners without over-rounding them.
@property (nonatomic) CGFloat cornerRadius;
/// The color of the image view’s border.
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/// The width of the image view’s border.
@property (nonatomic) CGFloat borderWidth;
/// The color of the image view’s shadow.
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
/// The opacity of the image view’s shadow.
@property (nonatomic) float shadowOpacity;
/// The blur radius (in points) used to render the image view’s shadow.
@property (nonatomic) CGFloat shadowRadius;
/// The offset (in points) of the image view’s shadow.
@property (nonatomic) CGSize shadowOffset;
@property (nonatomic) CGRect frame;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// The custom image view of the application.
SWIFT_CLASS("_TtC14ScheduleSchool11SSImageView")
@interface SSImageView : UICustomImageView
/// Indicates whether the image which the image view displays should be used as a template image.
@property (nonatomic, getter=template, setter=setTemplate:) BOOL template_;
/// Indicates whether the image view should be automatically provided a highlighted image.
@property (nonatomic) BOOL highlightable;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
@property (nonatomic, strong) UIImage * _Nullable image;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ScheduleSchool15SSNavigationBar")
@interface SSNavigationBar : UINavigationBar
/// The Interface Builder compatible copy of <code>style</code>.
/// Whenever its value is set, it is clamped and used to create an <code>SSNavigationBarStyle</code> instance.
@property (nonatomic) NSInteger _style;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UIViewControllerContextTransitioning;

/// The custom percent-driven interaction controller of the application.
/// If you want to allow user interaction in your animated transitioning, make sure to implement the properties, initializers and methods of “<code>SSPercentDrivenInteractiveTransitionDelegate</code>” and bind this interaction controller to your animated transitioning in the initializer.
SWIFT_CLASS("_TtC14ScheduleSchool36SSPercentDrivenInteractiveTransition")
@interface SSPercentDrivenInteractiveTransition : UIPercentDrivenInteractiveTransition
- (void)startInteractiveTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
- (void)updateInteractiveTransition:(CGFloat)percentComplete;
- (void)cancelInteractiveTransition;
- (void)finishInteractiveTransition;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An interaction controller which handles user interaction with a screen edge pan gesture recognizer.
/// <em>IMPORTANT:</em> The class is not responsible for starting the interactive transition when the gesture recognizer gets engaged.
/// <ul>
///   <li>
///     If the view controller is standalone (not embedded in a navigation controller), the gesture recognizer should be declared in the view controller and it should commit the presentation/dismissal of the view controller upon engagement. The transitioning delegate of the view controller should then return this class as the interaction controller of the transition.
///   </li>
///   <li>
///     If the view controller is embedded in a navigation controller, the gesture recognizer should be declared in the navigation controller and it should commit a push/pop operation upon engagement. The delegate of the navigation controller should then return this class as the interaction controller of the transition.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14ScheduleSchool36SSScreenEdgePanInteractiveTransition")
@interface SSScreenEdgePanInteractiveTransition : SSPercentDrivenInteractiveTransition
- (void)startInteractiveTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
- (void)cancelInteractiveTransition;
- (void)finishInteractiveTransition;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14ScheduleSchool19SSSwipeInformerView")
@interface SSSwipeInformerView : UIView
/// The Interface Builder compatible copy of <code>direction</code>.
/// Whenever its value is set, it is clamped and used to create an <code>SSSwipeInfoView.Direction</code> instance.
@property (nonatomic) NSInteger ibDirection;
/// Indicates whether the view informs about a swipe which begins a sequence of swipes (e.g the “Welcome” scene in first launch).
@property (nonatomic) BOOL begin;
/// The color of the arrow and the label’s text which inform about the swipe.
@property (nonatomic, strong) UIColor * _Nonnull color;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14ScheduleSchool11SSTableView")
@interface SSTableView : UITableView
- (CGRect)rectForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame style:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// The base class of the application’s custom table view cell with specific inspectable layer properties and full customizability.
SWIFT_CLASS("_TtC14ScheduleSchool21UICustomTableViewCell")
@interface UICustomTableViewCell : UITableViewCell
/// The radius to use when drawing rounded corners for the button’s background.
/// If its value is not set, the button will use its default corner radius.
/// If its value is less than zero, the button will use a corner radius of half of its height. This will cause the button to be drawn with fully rounded corners without over-rounding them.
@property (nonatomic) CGFloat cornerRadius;
/// The color of the button’s border.
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/// The width of the view layer’s border.
@property (nonatomic) CGFloat borderWidth;
/// The color of the view layer’s shadow.
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
/// The opacity of the view layer’s shadow.
@property (nonatomic) float shadowOpacity;
/// The blur radius (in points) used to render the view layer’s shadow.
@property (nonatomic) CGFloat shadowRadius;
/// The offset (in points) of the view layer’s shadow.
@property (nonatomic) CGSize shadowOffset;
/// The raw code of the button’s gradient.
/// If there is a valid code provided, the view will compile the code into an <code>SSGradient</code> and fill its layer with it.
/// If there is no code provided or the code is invalid, the view will be filled with the background color.
@property (nonatomic, copy) NSString * _Nonnull gradientCode;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) CGRect frame;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// The custom table view cell of the application.
SWIFT_CLASS("_TtC14ScheduleSchool15SSTableViewCell")
@interface SSTableViewCell : UICustomTableViewCell
/// The Interface Builder compatible copy of <code>behavior</code>.
/// Whenever its value is set, it is clamped and used to create an <code>SSTableViewCell.Behavior</code> instance.
@property (nonatomic) NSInteger ibBehavior;
@property (nonatomic) UITableViewCellSelectionStyle selectionStyle;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, getter=isUserInteractionEnabled) BOOL userInteractionEnabled;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, getter=isSelected) BOOL selected;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end


/// The base class of the application’s custom text field with specific inspectable layer properties and full customizability.
SWIFT_CLASS("_TtC14ScheduleSchool17UICustomTextField")
@interface UICustomTextField : UITextField
/// The radius to use when drawing rounded corners for the text field’s background.
/// If its value is not set, the text field will use its default corner radius.
/// If its value is less than zero, the text field will use a corner radius of half of its height. This will cause the text field to be drawn with fully rounded corners without over-rounding them.
@property (nonatomic) CGFloat cornerRadius;
/// The color of the text field’s border.
/// An invalid color by default. If its value is an invalid color, the text field will use the default border color for the corresponding border style.
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/// The width of the text field’s border.
@property (nonatomic) CGFloat borderWidth;
/// The color of the text field’s shadow.
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
/// The opacity of the text field’s shadow.
@property (nonatomic) float shadowOpacity;
/// The blur radius (in points) used to render the text field’s shadow.
@property (nonatomic) CGFloat shadowRadius;
/// The offset (in points) of the text field’s shadow.
@property (nonatomic) CGSize shadowOffset;
/// The raw code of the text field’s gradient.
/// If there is a valid code provided, the text field will compile the code into an <code>SSGradient</code> and fill its layer with it.
/// If there is no code provided or the code is invalid, the text field will be filled with the background color.
@property (nonatomic, copy) NSString * _Nonnull gradientCode;
@property (nonatomic) UITextBorderStyle borderStyle;
@property (nonatomic) CGRect frame;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// The custom text field of the application.
SWIFT_CLASS("_TtC14ScheduleSchool11SSTextField")
@interface SSTextField : UICustomTextField
@property (nonatomic, copy) NSString * _Null_unspecified localizationKey;
/// The color of the text field’s placeholder.
@property (nonatomic, strong) UIColor * _Nonnull placeholderColor;
/// The horizontal (left and right) insets of the text field’s text rectangle.
@property (nonatomic) CGFloat insetsHorizontal;
/// The vertical (top and bottom) insets of the text field’s text rectangle.
@property (nonatomic) CGFloat insetsVertical;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, copy) NSString * _Nullable placeholder;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)placeholderRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// Updates the button after the editing has started/ended.
/// The default implementation of this function does nothing. Subclasses may override this function to add operations upon the editing has started/ended.
- (void)updateEditing;
@end


/// A simple view which is capable of displaying a two-stop linear gradient.
SWIFT_CLASS("_TtC14ScheduleSchool21SSTwoStopGradientView")
@interface SSTwoStopGradientView : SSView
/// The starting point of the gradient (ranging from 0 to 1), relative to its parent layer.
@property (nonatomic) CGPoint startPoint;
/// The end point of the gradient (ranging from 0 to 1), relative to its parent layer.
@property (nonatomic) CGPoint endPoint;
/// The color of the first gradient stop
@property (nonatomic, strong) UIColor * _Nonnull color1;
/// The color of the second gradient stop.
@property (nonatomic, strong) UIColor * _Nonnull color2;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@class NSBundle;

/// The custom default view controller of the application.
SWIFT_CLASS("_TtC14ScheduleSchool16SSViewController")
@interface SSViewController : UIViewController
/// Indicates whether the content of the view controller is light.
/// If set to <code>true</code>, the dark status bar will be shown
/// If set to <code>false</code>, the light status bar will be shown
@property (nonatomic) BOOL isLight;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
